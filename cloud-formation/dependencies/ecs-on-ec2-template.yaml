AWSTemplateFormatVersion: 2010-09-09

Description: >
    This template contains ECS elements

#------------------------------------------------------------------------------
# Paramenters
#------------------------------------------------------------------------------

Parameters:

  ResourceTag:
    Description: This value will be used for tagging all resources in the stack
    Type: String
    Default: ecs3tier
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
  ECSClusterFor3tierApp:
    Description: ECS Cluster Name
    Type: String
    Default: ECSClusterFor3tierApp
  ECSServiceRole:
    Description: IAM Role used for creating the ECS cluster
    Type: String
    Default: ECSServiceRoleName
    # default be deleted
  ECSInstanceKeyPair:
    Description: Key pair to be used for SSH into the ECS instances
    Type: String
    Default: ECSInstanceKeyPair
    # default be deleted
  VPC:
    Description: Reference to the VPC
    Type: String
    Default: vpc-0ab5e464c7f3a4618
    # default be deleted

  VPCSecurityGroup:
    Description: Reference to the VPC SecurityGroup
    Type: String
    Default: sg-0738b847ccbede12b
    # default be deleted

  Tier1Subnet1:
    Description: Reference to Tier1 Subnet 1
    Type: String
    Default: subnet-011e8801b4320e0e4
    # default be deleted
  Tier1Subnet2:
    Description: Reference to Tier1 Subnet 2
    Type: String
    Default: subnet-0a94a8c1a156e8d55
    # default be deleted
  Tier2Subnet1:
    Description: Reference to Tier2 Subnet 1
    Type: String
    Default: subnet-0884835f27dd00572
    # default be deleted
  Tier2Subnet2:
    Description: Reference to Tier2 Subnet 2
    Type: String
    Default: subnet-068b6c2ef093afa40
    # default be deleted

  WordPressDBHost:
    Description: Host address from RDS Aurora 
    Type: String
    Default: db-stack-wpdatabasecluster-14moel190h5qk.cluster-cdtmsfxao7ut.ap-southeast-1.rds.amazonaws.com
    # default to be deleted
  WordPressDBName:
    Description: DB Name  WordPress DB
    Type: String
    Default: wpdb
    # makes sense to hardcode this  
  WordPressDBUser:
    Description: User for WordPress DB 
    Type: String
    Default: wpuser
    # default to be deleted
  WordPressDBPassword:
    Description: User for WordPress DB 
    Type: String
    Default: DBPa55w0rd
    # default to be deleted

  FileSystemID:
    Description: File system to be used with the tasks
    Type: String
    Default: fs-9251fcd2
    # default to be deleted

#------------------------------------------------------------------------------
# Resources
#------------------------------------------------------------------------------

Resources:

#------------------------------------------------------------------------------
# ECS Cluster scaling configurations 
#------------------------------------------------------------------------------

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'ECSServiceRole']

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        KeyName: !Ref ECSInstanceKeyPair
        InstanceType: "t3.xlarge"
        IamInstanceProfile: 
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds: 
          - !Ref EcsSecurityGroup
          - !Ref VPCSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSClusterFor3tierApp} >> /etc/ecs/ecs.config


  AutoScalingGroup1:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      # AvailabilityZones:
      #   - !Select [0, !GetAZs ""]
      HealthCheckGracePeriod: 60
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false
      VPCZoneIdentifier:
        - !Ref Tier2Subnet1
      MaxSize: "10"
      MinSize: "0"
      DesiredCapacity: "0"
      Tags:
        - Key: resource-label
          Value: !Ref ResourceTag
          PropagateAtLaunch: True
        - Key: Name
          Value: ASG1-ECS-on-EC2
          PropagateAtLaunch: True
  
  AutoScalingGroup2:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      # AvailabilityZones:
      #   - !Select [0, !GetAZs ""]
      HealthCheckGracePeriod: 60
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false
      VPCZoneIdentifier:
        - !Ref Tier2Subnet2
      MaxSize: "10"
      MinSize: "0"
      DesiredCapacity: "0"
      Tags:
        - Key: resource-label
          Value: !Ref ResourceTag
          PropagateAtLaunch: True
        - Key: Name
          Value: ASG2-ECS-on-EC2
          PropagateAtLaunch: True


  CapacityProvider1:
    Type: "AWS::ECS::CapacityProvider"
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup1
        ManagedScaling:
          Status: ENABLED
        ManagedTerminationProtection: DISABLED
  
  CapacityProvider2:
    Type: "AWS::ECS::CapacityProvider"
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup2
        ManagedScaling:
          Status: ENABLED
        ManagedTerminationProtection: DISABLED

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref ECSClusterFor3tierApp
    #   ClusterSettings: 
    #     - ClusterSettings
    #   Configuration: 
    #     ClusterConfiguration
    #   DefaultCapacityProviderStrategy: 
    #     - CapacityProviderStrategyItem
      Tags:
      - Key: resource-label
        Value: !Ref ResourceTag
      - Key: Name
        Value: ECSCluster-for-3tierApp

  ClusterCPAssociation:
    Type: "AWS::ECS::ClusterCapacityProviderAssociations"
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
        - !Ref CapacityProvider1
        - !Ref CapacityProvider2
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref CapacityProvider1
          Base: 0
          Weight: 1
        - CapacityProvider: !Ref CapacityProvider2
          Base: 0
          Weight: 1
        # - CapacityProvider: FARGATE
        #   Base: 1
        #   Weight: 0
        # - CapacityProvider: FARGATE_SPOT
        #   Weight: 1

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VPC'
      Tags:
      - Key: resource-label
        Value: !Ref ResourceTag
      - Key: Name
        Value: SG-ECSCluster-for-3tierApp

  EcsSecurityGroupHTTPinbound1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  # For docker bridge networking
  EcsSecurityGroupHTTPinbound2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '32768'
      ToPort: '61000'
      CidrIp: 0.0.0.0/0
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

#------------------------------------------------------------------------------
# Application Tasks & Service
#------------------------------------------------------------------------------

  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: !Ref ResourceTag
      ContainerDefinitions: 
      - Name: wordpress-app
        Cpu: 512
        Essential: true
        Image: wordpress:5-php8.0
        Memory: 1024
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Join ['', [ !Ref ResourceTag, wordpress-app] ]
        Environment:
          - Name: WORDPRESS_DB_HOST
            Value: !Sub ${WordPressDBHost}:3306
          - Name: WORDPRESS_DB_NAME
            Value: !Ref WordPressDBName
          - Name: WORDPRESS_DB_PASSWORD
            Value: !Ref WordPressDBPassword
          - Name: WORDPRESS_DB_USER
            Value: !Ref WordPressDBUser
        MountPoints:
        - ContainerPath: /var/www/html
          SourceVolume: wordpress_data
        PortMappings:
        - ContainerPort: 80
          HostPort: 0
      Volumes:
      - Name: wordpress_data
        EFSVolumeConfiguration:
          FilesystemId: !Ref FileSystemID

      ExecutionRoleArn: !Ref ECSServiceRole
      # NetworkMode: awsvpc
      NetworkMode: bridge
      PidMode: task
      # PlacementConstraints: 
      #   - Expression: !Sub '(attribute:ecs.subnet.id == ${Tier2Subnet1} ) || (attribute:ecs.subnet.id == ${Tier2Subnet2})'
      #     Type: memberOf
      RequiresCompatibilities: 
        - EC2
      Tags:
      - Key: resource-label
        Value: !Ref ResourceTag



  WPService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: WPService
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ApplicationTaskDefinition
      DesiredCount: 4
      LoadBalancers:
      - ContainerName: "wordpress-app"
        ContainerPort: 80
        TargetGroupArn: !Ref ECSTargetGroup
      CapacityProviderStrategy:
        - CapacityProvider: !Ref CapacityProvider1
          Base: 0
          Weight: 1
        - CapacityProvider: !Ref CapacityProvider2
          Base: 0
          Weight: 1
      # NetworkConfiguration:
      #   AwsvpcConfiguration:
      #     SecurityGroups: 
      #       - !Ref EcsSecurityGroup
      #     Subnets: 
      #       - !Ref Tier2Subnet1
      #       - !Ref Tier2Subnet2

#------------------------------------------------------------------------------
# ALB
#------------------------------------------------------------------------------

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VPC'
      Tags:
      - Key: resource-label
        Value: !Ref ResourceTag
      - Key: Name
        Value: SG-for-ALB-3tierApp

  ALBSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ALBSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: LB-for-ecs3tierApp
      Subnets: 
        - !Ref Tier1Subnet1
        - !Ref Tier2Subnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
      - Key: resource-label
        Value: !Ref ResourceTag

  ECSLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup

# Dynamic Target Group to range of host ports
  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 50
      HealthCheckPath: /wp-content/
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ECSLoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref ECSTargetGroup
          Type: forward

#------------------------------------------------------------------------------
# Outputs
#------------------------------------------------------------------------------


Outputs:
  ECSCluster:
    Value: !Ref ECSCluster
  ECSLoadBalancer:
    Value: !GetAtt ECSLoadBalancer.DNSName
  ECSServiceRole: 
    Value: !Ref ECSServiceRole
  EC2InstanceProfile:
    Value: !Ref EC2InstanceProfile
  CloudwatchLogsGroup:
    Value: !Ref CloudwatchLogsGroup
